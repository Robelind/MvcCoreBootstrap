using System;
using System.Linq.Expressions;
using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;
using MvcCoreBootstrap.Rendering;
using MvcCoreBootstrapForm.Config;

namespace MvcCoreBootstrapForm.Rendering
{
    internal class TextInputRenderer : ControlRenderer, ITypedControlRenderer, INonTypedControlRenderer
    {
        private readonly TextInputConfig _config;

        public TextInputRenderer(TextInputConfig config, ITooltipRenderer tooltipRenderer)
        : base(config, tooltipRenderer)
        {
            _config = config;
        }

        protected override IHtmlContent HtmlElement<TModel, TResult>(IHtmlHelper<TModel> htmlHelper,
            Expression<Func<TModel, TResult>> expression)
        {
            IHtmlContent element = _config.Password
                ? htmlHelper.PasswordFor(expression, null)
                : htmlHelper.TextBoxFor(expression, _config.Format, _config.HtmlAttributes);

            return(element);
        }

        protected override void Render()
        {
            this.AddAttribute("placeholder", _config.PlaceHolder);
            this.AddAttribute("readonly", _config.ReadOnly);
<<<<<<< HEAD
=======
            TooltipRenderer.Render(Element, _config.Tooltip);
>>>>>>> dev
        }

        protected override TagBuilder Container()
        {
            TagBuilder element = Element;

            if(_config.IsInputGroup)
            {
                element = this.RenderInInputGroup();
            }

            return(element);
        }

        private TagBuilder RenderInInputGroup()
        {
            TagBuilder inputGroup = new TagBuilder("div");
            TagBuilder prependIcon = this.AddOn(_config.PrependIcon, _config.PrependIconPrefix, false);
            TagBuilder prepend = prependIcon == null ? this.AddOn(_config.Prepend, null, false) : null;
            TagBuilder appendIcon = this.AddOn(_config.AppendIcon, _config.AppendIconPrefix);
            TagBuilder append = appendIcon == null ? this.AddOn(_config.Append) : null;

            inputGroup.AddCssClass("input-group");
            inputGroup.InnerHtml.AppendHtml(prependIcon ?? prepend);
            inputGroup.InnerHtml.AppendHtml(Element);
            inputGroup.InnerHtml.AppendHtml(appendIcon ?? append);

            return(inputGroup);
        }

        private TagBuilder AddOn(string text, string iconPrefix = null, bool append = true)
        {
            TagBuilder addOn = null;

<<<<<<< HEAD
            if (text != null || iconPrefix != null)
=======
            if(text != null || iconPrefix != null)
>>>>>>> dev
            {
                TagBuilder addOnContent = new TagBuilder("span");

                addOn = new TagBuilder("div");
                addOn.AddCssClass(append ? "input-group-append" : "input-group-prepend");
                addOnContent.AddCssClass("input-group-text");
                if(iconPrefix != null)
                {
                    TagBuilder icon = new TagBuilder("i");

                    icon.AddCssClass(iconPrefix);
                    icon.AddCssClass($"{iconPrefix}-{text}");
                    addOnContent.InnerHtml.AppendHtml(icon);
                }
                else
                {
                    addOnContent.InnerHtml.Append(text);
                }
                addOn.InnerHtml.AppendHtml(addOnContent);
            }

            return (addOn);
        }
    }
}
